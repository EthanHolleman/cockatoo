#!/usr/bin/env python 

"""
Compare distance between screens
"""
import getopt,sys
import cockatoo

class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg

def main(argv=None):
    if argv is None:
        argv = sys.argv
    try:
        try:
            opts, args = getopt.getopt(argv[1:], "1:2:a:w:r", ["screen1=", "screen2=", "algorithm=", "weights=", "raw"])
        except getopt.error, msg:
            raise Usage(msg)

        screen1 = None
        screen2 = None
        algorithm = None
        raw_output = False
        weights = [1,1]
        for o, a in opts:
            if o in ("-1", "--screen1"):
                screen1 = a
            elif o in ("-2", "--screen2"):
                screen2 = a
            elif o in ("-a", "--algorithm"):
                algorithm = a
            elif o in ("-w", "--weights"):
                weights = []
                for w in re.split(r',', a):
                    try:
                        weights.append(float(w))
                    except:
                        raise Usage("Invalid weights")
            elif o in ("-r", "--raw"):
                raw_output = True

        if screen1 is None:
            raise Usage("Please provide at least 1 screen to compare")
        if len(weights) != 2:
            raise Usage("Please provide a valid weights string: 1,1")

        metric_func = cockatoo.c6.distance
        if algorithm != "c6":
            metric_func = cockatoo.metric.distance
            algorithm = "CD_coeff"

        
        s1 = cockatoo.screen.parse_json(screen1)
        s2 = None
        if screen2 is not None:
            s2 = cockatoo.screen.parse_json(screen2)

        if raw_output:
            if s2 is None or len(s1) != len(s2):
                print "ERROR: Raw output requires 2 screens to have the same number of cocktails"
                sys.exit(2)
                
            print "\t".join(['algorithm', s1.name, s2.name, 'score'])
            for i in range(len(s1)):
                score = metric_func(s1.cocktails[i], s2.cocktails[i])
                print "\t".join([algorithm,s1.cocktails[i].name, s2.cocktails[i].name, str(score)])

            sys.exit(0)


        if s2 is None:
            score = cockatoo.c6.internal_similarity(s1, metric_func)
            print "Internal similarity score: %s" % str(score)
        else:
            print "Internal similarity screen1 (%s): %s" % (s1.name, str(cockatoo.c6.internal_similarity(s1, metric_func)))
            print "Internal similarity screen2 (%s): %s" % (s2.name, str(cockatoo.c6.internal_similarity(s2, metric_func)))

            score = cockatoo.c6.screen_distance(s1, s2, metric_func)
            print "Distance between screens: %s" % str(score)

        return 0

    except Usage, err:
        print >>sys.stderr, err.msg
        print >>sys.stderr, ""
        print >>sys.stderr, "Usage: cockatoo-compare [OPTIONS]"
        print >>sys.stderr, "        -1, --screen1         path to screen1"
        print >>sys.stderr, "        -2, --screen2         path to screen2"
        print >>sys.stderr, "        -a, --algorithm       c6 | CD_coeff (default)"
        print >>sys.stderr, "        -w, --weights         weights=1,1"
        print >>sys.stderr, "        -r, --raw             output raw data only"

        return 2

if __name__ == "__main__":
    sys.exit(main())
