#!/usr/bin/env python

"""
Convert CSV screen to JSON

"""
import logging
import getopt,sys
import pprint
import csv,re,math
import cockatoo

logging.basicConfig(
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    level=logging.CRITICAL
)

class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg

def main(argv=None):
    if argv is None:
        argv = sys.argv
    try:
        try:
            opts, args = getopt.getopt(argv[1:], "vs:n:c:x:i:o:", ["verbose", "screen=", "name=", "summary=", "ions=","output="])
        except getopt.error, msg:
            raise Usage(msg)

        screen_file = None
        name = None
        summary_file = None
        ions_file = None
        out_file = None
        verbose = False
        for o, a in opts:
            if o in ("-s", "--screen"):
                screen_file = a
            elif o in ("-n", "--name"):
                name = a
            elif o in ("-c", "--summary"):
                summary_file = a
            elif o in ("-i", "--ions"):
                ions_file = a
            elif o in ("-o", "--output"):
                out_file = a
            elif o in ("-v", "--verbose"):
                verbose = True

        if screen_file is None:
            raise Usage("Please provide a path to the screen")
        if summary_file is None:
            raise Usage("Please provide a path to the compound summary file")
        if out_file is None:
            raise Usage("Please provide a path to the output file")

        if verbose:
            logging.getLogger().setLevel(logging.DEBUG)

        screen = cockatoo.screen.parse_csv(name, screen_file)
        screen._set_summary_stats(summary_file)
        screen._set_ions(ions_file)

        with open(out_file, 'w') as output:
            output.write(screen.json())

        if verbose:
            logging.info("Screen stats:")
            screen.print_stats()
            logging.info("Done converting screen. Output written to: %s" % out_file)

        return 0

    except Usage, err:
        print >>sys.stderr, err.msg
        print >>sys.stderr, ""
        print >>sys.stderr, "Usage: cockatoo-convert [OPTIONS]"
        print >>sys.stderr, "        -v, --verbose            print debugging output"
        print >>sys.stderr, "        -s, --screen             screen"
        print >>sys.stderr, "        -o, --output             outputfile"
        print >>sys.stderr, "        -n, --name               name of screen (used in output)"
        print >>sys.stderr, "        -c, --summary            path to compound summary file"
        print >>sys.stderr, "        -i, --ions               path to ions table file"

        return 2

if __name__ == "__main__":
    sys.exit(main())
